//importando as blibiotecas 
#include<stdio.h>
#include<stdlib.h>
#include<semaphore.h>
#include<pthread.h>
#define N 5 
//numero de filosofos
#define PENSAR 0
#define FOME 1
#define COMER 2
#define ESQUERDA (nfilosofo+4)%N 
 //pega o garfo da esquerda     
                          
#define DIREITA (nfilosofo+1)%N  
 //pega o garfo da direita

void *filosofo(void *num);
void agarraGarfo(int);
void deixaGarfo(int);
void testar(int);

sem_t mutex; //semaforo para exclusao mutua
sem_t S[N]; //array para o estado do filosofo
 //começa o semáforo
int estado[N];
int nfilosofo[N]={0,1,2,3,4};

void *filosofo(void *num)
{
   while(1) //laço eterno
   {
      int *i = num;
      sleep(1); //pensa
      agarraGarfo(*i); //pega os garfos
      sleep(1);//come
      deixaGarfo(*i);//larga os garfos para outro pegar 
   }
}

void agarraGarfo(int nfilosofo)
{
   sem_wait(&mutex);
   estado[nfilosofo] = FOME;//mudando o estado para com fome
   printf("Filosofo %d tem fome.\n", nfilosofo+1);
   //+1 para imprimir filosofo 1 e nao filosofo 0
   testar(nfilosofo);//teste para ver se poder comer
   sem_post(&mutex);
   sem_wait(&S[nfilosofo]);
   sleep(1);
}

void deixaGarfo(int nfilosofo)
{
   sem_wait(&mutex);
   estado[nfilosofo]=PENSAR;
   printf("Filosofo %d deixou os garfos %d e %d.\n", nfilosofo+1, ESQUERDA+1, nfilosofo+1);
   printf("Filosofo %d esta a pensar.\n", nfilosofo+1);
   testar(ESQUERDA);
   testar(DIREITA);
   sem_post(&mutex);
}
//a variavel de testar serve para um filosofo saber se o
//filoso da esquerda e da direita nao estao com os garfos 
//pois obviamente se n estiverem o filosofo que fez o teste
//muda o estado dele e pode assim pegar os garfos e comer
void testar(int nfilosofo)
{
   if(estado[nfilosofo]==FOME && estado[ESQUERDA]
 !=COMER && estado[DIREITA]!=COMER)
   {
      estado[nfilosofo]=COMER;
      sleep(2);
      printf("Filosofo %d agarrou os garfos %d e %d.\n", nfilosofo+1, ESQUERDA+1, nfilosofo+1);
      printf("Filosofo %d esta a comer.\n", nfilosofo+1);
      sem_post(&S[nfilosofo]);
   }
}

int main() {
   int i;
   pthread_t thread_id[N]; 
//aqui para identificar as threads

   sem_init(&mutex,0,1);
   for(i=0;i<N;i++)
      sem_init(&S[i],0,0);
   for(i=0;i<N;i++)
   {
      pthread_create(&thread_id[i], NULL, filosofo, &nfilosofo[i]);
      //criar as threads
      printf("Filosofo %d esta a pensar.\n",i+1);
   }
   for(i=0;i<N;i++)
   pthread_join(thread_id[i],NULL); 
//para fazer a junção das threads

   return(0);
}
